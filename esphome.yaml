esphome:
  name: 'bbq-control'
  platform: ESP32
  board: esp32dev


# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  password: "9b8168244b37a4b92d472a2d2915d179"

wifi:
  networks:
  - ssid: !secret wifi_ssid
    password: !secret wifi_password
  - ssid: !secret dad_wifi_ssid
    password: !secret dad_wifi_password


  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
   ssid: "Bbq-Meter Fallback Hotspot"
   password: "IwBCSbP28U7L"


captive_portal:

web_server:
  port: 80
  auth:
    username: admin
    password: !secret wifi_password
    
### Pull time from Home Assistant because everything needs a clock on it ###
time:
  - platform: homeassistant
    id: my_time

### Setup i2c for display and ADC ###
i2c:
  - id: bus_a
    sda: GPIO15
    scl: GPIO4
  - id: bus_b
    sda: GPIO13
    scl: GPIO14
    scan: true

pcf8574:
  - id: 'pcf8575_hub'
    address: 0x20
    i2c_id: bus_b
    pcf8575: true

spi:
  miso_pin: GPIO19
  clk_pin: GPIO18

switch:
  - platform: gpio
    restore_mode: RESTORE_DEFAULT_OFF
    name: "Probe1 Green"
    id: probe1_green
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 0
      number: 2
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: false
    

  - platform: gpio
    restore_mode: RESTORE_DEFAULT_OFF
    name: "Probe1 Red"
    id: probe1_red
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 1
      number: 3
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: false

  - platform: gpio
    restore_mode: RESTORE_DEFAULT_OFF
    name: "Probe1 Blue"
    id: probe1_blue
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 1
      number: 10
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: false

  - platform: gpio
    restore_mode: RESTORE_DEFAULT_OFF
    name: "Probe2 Green"
    id: probe2_green
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 0
      number: 4
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: false

  - platform: gpio
    restore_mode: RESTORE_DEFAULT_OFF
    name: "Probe2 Red"
    id: probe2_red
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 1
      number: 5
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: false

  - platform: gpio
    restore_mode: RESTORE_DEFAULT_OFF
    name: "Probe2 Blue"
    id: probe2_blue
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 1
      number: 11
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: false

  - platform: gpio
    restore_mode: RESTORE_DEFAULT_OFF
    name: "Probe3 Green"
    id: probe3_green
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 0
      number: 6
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: false

  - platform: gpio
    restore_mode: RESTORE_DEFAULT_OFF
    name: "Probe3 Red"
    id: probe3_red
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 1
      number: 7
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: false

  - platform: gpio
    restore_mode: RESTORE_DEFAULT_OFF
    name: "Probe3 Blue"
    id: probe3_blue
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 1
      number: 12
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: false
 
  - platform: gpio
    restore_mode: RESTORE_DEFAULT_OFF
    name: "Probe4 Green"
    id: probe4_green
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 0
      number: 8
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: false

  - platform: gpio
    restore_mode: RESTORE_DEFAULT_OFF
    name: "Probe4 Red"
    id: probe4_red
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 1
      number: 9
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: false

  - platform: gpio
    restore_mode: RESTORE_DEFAULT_OFF
    name: "Probe4 Blue"
    id: probe4_blue
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 1
      number: 13
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: false
 
  - platform: gpio
    restore_mode: RESTORE_DEFAULT_OFF
    name: "BBQ Green"
    id: bbq_green
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 0
      number: 0
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: false

  - platform: gpio
    restore_mode: RESTORE_DEFAULT_OFF
    name: "BBQ Red"
    id: bbq_red
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 1
      number: 1
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: false
  
  - platform: gpio
    restore_mode: RESTORE_DEFAULT_OFF
    name: "BBQ Blue"
    id: bbq_blue
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 1
      number: 14
      # One of INPUT or OUTPUT
      mode:
        output: true
      inverted: false
      
  - platform: gpio
    restore_mode: RESTORE_DEFAULT_OFF
    name: 'bbq fan'
    id: bbq_fan
    pin: GPIO2
    inverted: false

### Global Vars for OLED Menu State Retention ###
globals:
  - id: edit
    type: bool
    initial_value: "false"
  - id: current_page
    type: int
    initial_value: "1"
  - id: prev_page
    type: int
    initial_value: "3"
  - id: bbq_mode
    type: int
    initial_value: "0"
  - id: page_max
    type: int
    initial_value: "2"
  - id: page_min
    type: int
    initial_value: "1"
  - id: desired_main_temp
    type: int
    initial_value: "100"
  - id: bbq_max_temp
    type: int
    initial_value: "170"
  - id: bbq_desired_temp
    type: int
    initial_value: "0"
  - id: probe1_desired_temp
    type: int
    initial_value: "0"
  - id: probe2_desired_temp
    type: int
    initial_value: "0"
  - id: probe3_desired_temp
    type: int
    initial_value: "0"
  - id: probe4_desired_temp
    type: int
    initial_value: "0"

number:
  - platform: template
    name: "BBQ_adjustment"
    id: "bbq_adj"
    optimistic: true
    min_value: -100
    initial_value: 0
    max_value: 100
    step: 1
    
  - platform: template
    name: "probe1_adjustment"
    id: "probe1_adj"
    optimistic: true
    min_value: -100
    initial_value: 0
    max_value: 100
    step: 1
    
  - platform: template
    name: "probe2_adjustment"
    id: "probe2_adj"
    optimistic: true
    min_value: -100
    initial_value: 0
    max_value: 100
    step: 1
    
  - platform: template
    name: "probe3_adjustment"
    id: "probe3_adj"
    optimistic: true
    min_value: -100
    initial_value: 0
    max_value: 100
    step: 1

  - platform: template
    name: "probe4_adjustment"
    id: "probe4_adj"
    optimistic: true
    min_value: -100
    initial_value: 0
    max_value: 100
    step: 1
    
  - platform: template
    name: "Probe1 Desired Temp"
    id: "probe1_temp_slider"
    step: 5
    min_value: 100
    max_value: 205
    mode: slider
    optimistic: true
    unit_of_measurement: "°C"
    set_action:
      then:
        - lambda: id(probe1_desired_temp) = ((x/5)-20)+100;

  - platform: template
    name: "Probe2 Desired Temp"
    id: "probe2_temp_slider"
    step: 5
    min_value: 100
    max_value: 205
    mode: slider
    optimistic: true
    unit_of_measurement: "°C"
    set_action:
      then:
        - lambda: id(probe2_desired_temp) = ((x/5)-20)+100;
        
  - platform: template
    name: "Probe3 Desired Temp"
    id: "probe3_temp_slider"
    step: 5
    min_value: 100
    max_value: 205
    mode: slider
    optimistic: true
    unit_of_measurement: "°C"
    set_action:
      then:
        - lambda: id(probe3_desired_temp) = ((x/5)-20)+100;
  - platform: template
    name: "Probe4 Desired Temp"
    id: "probe4_temp_slider"
    step: 5
    min_value: 100
    max_value: 205
    mode: slider
    optimistic: true
    unit_of_measurement: "°C"
    set_action:
      then:
        - lambda: id(probe4_desired_temp) = ((x/5)-20)+100;
  - platform: template
    name: "BBQ Desired Temp"
    id: "bbq_temp_slider"
    step: 5
    min_value: 100
    max_value: 450
    mode: slider
    optimistic: true
    unit_of_measurement: "°C"
    set_action:
      then:
        - lambda: id(bbq_desired_temp) = ((x/5)-20)+100;

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO22
      mode: INPUT_PULLUP
      inverted: true
    name: "Probe1 Plugged" 
    id: probe1_plugged
    on_state:
        - if:
            condition:
               lambda: 'return id(probe1_plugged).state;'
            then:
              - switch.turn_on: probe1_blue
              - switch.turn_off: probe1_green
              - switch.turn_off: probe1_red
            else:
              - switch.turn_off: probe1_blue
              - switch.turn_off: probe1_green
              - switch.turn_off: probe1_red
              - lambda: |-
                   id(probe1).publish_state(0); 
    
  - platform: gpio
    name: "Probe2 Plugged"
    id: probe2_plugged
    pin:
      pcf8574: pcf8575_hub
      # Use pin number 0
      number: 15
      # One of INPUT or OUTPUT
      mode: INPUT
      inverted: true
    on_state:
        - if:
            condition:
               lambda: 'return id(probe2_plugged).state;'
            then:
              - switch.turn_on: probe2_blue
              - switch.turn_off: probe2_green
              - switch.turn_off: probe2_red
            else:
              - switch.turn_off: probe2_blue
              - switch.turn_off: probe2_green
              - switch.turn_off: probe2_red
              - lambda: |-
                   id(probe2).publish_state(0); 
              
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: true
    name: "Probe3 Plugged" 
    id: probe3_plugged
    on_state:
        - if:
            condition:
               lambda: 'return id(probe3_plugged).state;'
            then:
              - switch.turn_on: probe3_blue
              - switch.turn_off: probe3_green
              - switch.turn_off: probe3_red
            else:
              - switch.turn_off: probe3_blue
              - switch.turn_off: probe3_green
              - switch.turn_off: probe3_red
              - lambda: |-
                   id(probe3).publish_state(0); 

  - platform: gpio
    pin:
      number: GPIO12
      mode: INPUT_PULLUP
      inverted: true
    name: "Probe4 Plugged" 
    id: probe4_plugged
    on_state:
        - if:
            condition:
               lambda: 'return id(probe4_plugged).state;'
            then:
              - switch.turn_on: probe4_blue
              - switch.turn_off: probe4_green
              - switch.turn_off: probe4_red
            else:
              - switch.turn_off: probe4_blue
              - switch.turn_off: probe4_green
              - switch.turn_off: probe4_red
              - lambda: |-
                   id(probe4).publish_state(0);
              
  - platform: gpio
    pin:
      number: GPIO27
      mode: INPUT_PULLUP
      inverted: true
    name: "BBQ Plugged" 
    id: bbq_plugged
    on_state:
        - if:
            condition:
               lambda: 'return id(bbq_plugged).state;'
            then:
              - switch.turn_on: bbq_blue
              - switch.turn_off: bbq_green
              - switch.turn_off: bbq_red
            else:
              - switch.turn_off: bbq_blue
              - switch.turn_off: bbq_green
              - switch.turn_off: bbq_red
              - lambda: |-
                   id(maintemp).publish_state(0);

  - platform: gpio
    pin:
      number: GPIO21
      mode: INPUT_PULLUP
      inverted: true
    name: "Rotary Press"
    on_press:
      then:
        - if:
            condition:
              lambda: 'return id(rotary).state > 99;'
            then:
                - if:
                    condition:
                      lambda: 'return id(current_page)==3;'
                    then:
                      - globals.set:
                          id: bbq_desired_temp
                          value: !lambda |-
                            return id(rotary).state;
                      - number.set:
                          id: bbq_temp_slider
                          value: !lambda |-
                            return (floor(id(bbq_desired_temp) / 100.0) * 100) + ((id(bbq_desired_temp) - (floor(id(bbq_desired_temp) / 100.0) * 100)) * 5);
                - if:
                    condition:
                      lambda: 'return id(current_page)==4;'
                    then:
                      - globals.set:
                          id: probe1_desired_temp
                          value: !lambda |-
                            return id(rotary).state;
                      - number.set:
                          id: probe1_temp_slider
                          value: !lambda |-
                            return (floor(id(probe1_desired_temp) / 100.0) * 100) + ((id(probe1_desired_temp) - (floor(id(probe1_desired_temp) / 100.0) * 100)) * 5);
                - if:
                    condition:
                      lambda: 'return id(current_page)==5;'
                    then:
                      - globals.set:
                          id: probe2_desired_temp
                          value: !lambda |-
                            return id(rotary).state;
                      - number.set:
                          id: probe2_temp_slider
                          value: !lambda |-
                            return (floor(id(probe2_desired_temp) / 100.0) * 100) + ((id(probe2_desired_temp) - (floor(id(probe2_desired_temp) / 100.0) * 100)) * 5);
                - if:
                    condition:
                      lambda: 'return id(current_page)==6;'
                    then:
                      - globals.set:
                          id: probe3_desired_temp
                          value: !lambda |-
                            return id(rotary).state;
                      - number.set:
                          id: probe3_temp_slider
                          value: !lambda |-
                            return (floor(id(probe3_desired_temp) / 100.0) * 100) + ((id(probe3_desired_temp) - (floor(id(probe3_desired_temp) / 100.0) * 100)) * 5);
                - if:
                    condition:
                      lambda: 'return id(current_page)==7;'
                    then:
                      - globals.set:
                          id: probe4_desired_temp
                          value: !lambda |-
                            return id(rotary).state;
                      - number.set:
                          id: probe4_temp_slider
                          value: !lambda |-
                            return (floor(id(probe4_desired_temp) / 100.0) * 100) + ((id(probe4_desired_temp) - (floor(id(probe4_desired_temp) / 100.0) * 100)) * 5);
                - globals.set:
                    id: page_max
                    value: "8"
                - globals.set:
                    id: page_min
                    value: "3"
                - globals.set:
                    id: edit
                    value: "false"
                - display.page.show: !lambda |-
                    if (id(prev_page)==3) {
                      return id(page3);
                    } if (id(prev_page)==4) {
                      return id(page4);
                    } if (id(prev_page)==5) {
                      return id(page5);
                    } if (id(prev_page)==6) {
                      return id(page6);
                    } if (id(prev_page)==7) {
                      return id(page7);
                    } if (id(prev_page)==8) {
                      return id(page8);
                    }
                    else{
                      return id(page3);
                    }
                    
        - if:
            condition:
              lambda: 'return id(rotary).state == 1;'
            then:  
                - sensor.rotary_encoder.set_value:
                    id: rotary
                    value: 3
                - globals.set:
                    id: bbq_mode
                    value: "1"
                - globals.set:
                    id: page_max
                    value: "8"
                - globals.set:
                    id: page_min
                    value: "3"
                - display.page.show: !lambda |-
                    return id(page3);
        - if:
            condition:
              lambda: 'return id(rotary).state == 2;'
            then:  
                - sensor.rotary_encoder.set_value:
                    id: rotary
                    value: 3
                - globals.set:
                    id: bbq_mode
                    value: "2"
                - globals.set:
                    id: page_max
                    value: "8"
                - globals.set:
                    id: page_min
                    value: "3"
                - display.page.show: !lambda |-
                    return id(page3);
        - if:
            condition:
              lambda: 'return id(rotary).state == 3;'
            then:
                - globals.set:
                    id: bbq_max_temp
                    value: "170"
                - globals.set:
                    id: edit
                    value: "true"
                - globals.set:
                    id: page_max
                    value: "9"
                - globals.set:
                    id: page_min
                    value: "9"
                - globals.set:
                    id: prev_page
                    value: "3"
                - if:
                    condition:
                      lambda: 'return id(bbq_desired_temp) > 0;'
                    then:
                     - sensor.rotary_encoder.set_value:
                        id: rotary
                        value: !lambda |-
                          return id(bbq_desired_temp);
                - if:
                    condition:
                      lambda: 'return id(bbq_desired_temp) == 0;'
                    then:
                     - sensor.rotary_encoder.set_value:
                        id: rotary
                        value: 100
                - display.page.show: !lambda |-
                    return id(page9);
        - if:
            condition:
              lambda: 'return id(rotary).state == 4;'
            then:
                - globals.set:
                    id: bbq_max_temp
                    value: "121"
                - globals.set:
                    id: edit
                    value: "true"
                - globals.set:
                    id: page_max
                    value: "9"
                - globals.set:
                    id: page_min
                    value: "9"
                - globals.set:
                    id: prev_page
                    value: "4"
                - if:
                    condition:
                      lambda: 'return id(probe1_desired_temp) > 0;'
                    then:
                     - sensor.rotary_encoder.set_value:
                        id: rotary
                        value: !lambda |-
                          return id(probe1_desired_temp);
                - if:
                    condition:
                      lambda: 'return id(probe1_desired_temp) == 0;'
                    then:
                      - sensor.rotary_encoder.set_value:
                            id: rotary
                            value: 100
                - sensor.rotary_encoder.set_value:
                      id: rotary
                      value: 100
                - display.page.show: !lambda |-
                    return id(page9);
        - if:
            condition:
              lambda: 'return id(rotary).state == 5;'
            then:
                - globals.set:
                    id: bbq_max_temp
                    value: "121"
                - globals.set:
                    id: edit
                    value: "true"
                - globals.set:
                    id: page_max
                    value: "9"
                - globals.set:
                    id: page_min
                    value: "9"
                - globals.set:
                    id: prev_page
                    value: "5"
                - sensor.rotary_encoder.set_value:
                      id: rotary
                      value: 100
                - display.page.show: !lambda |-
                    return id(page9);
        - if:
            condition:
              lambda: 'return id(rotary).state == 6;'
            then:
                - globals.set:
                    id: bbq_max_temp
                    value: "121"
                - globals.set:
                    id: edit
                    value: "true"
                - globals.set:
                    id: page_max
                    value: "9"
                - globals.set:
                    id: page_min
                    value: "9"
                - globals.set:
                    id: prev_page
                    value: "6"
                - sensor.rotary_encoder.set_value:
                      id: rotary
                      value: 100
                - display.page.show: !lambda |-
                    return id(page9);
        - if:
            condition:
              lambda: 'return id(rotary).state == 7;'
            then:
                - globals.set:
                    id: bbq_max_temp
                    value: "121"
                - globals.set:
                    id: edit
                    value: "true"
                - globals.set:
                    id: page_max
                    value: "9"
                - globals.set:
                    id: page_min
                    value: "9"
                - globals.set:
                    id: prev_page
                    value: "7"
                - sensor.rotary_encoder.set_value:
                      id: rotary
                      value: 100
                - display.page.show: !lambda |-
                    return id(page9);
        - if:
            condition:
              lambda: 'return id(rotary).state == 8;'
            then:  
                - switch.turn_off: bbq_fan
                - globals.set:
                    id: bbq_mode
                    value: "0"
                - globals.set:
                    id: page_max
                    value: "2"
                - globals.set:
                    id: page_min
                    value: "1"
                - display.page.show: !lambda |-
                    return id(page1);
                - globals.set:
                    id: bbq_desired_temp
                    value: "0"
                - globals.set:
                    id: probe1_desired_temp
                    value: "0"
                - globals.set:
                    id: probe2_desired_temp
                    value: "0"
                - globals.set:
                    id: probe3_desired_temp
                    value: "0"
                - globals.set:
                    id: probe4_desired_temp
                    value: "0"
                - number.set:
                    id: probe1_temp_slider
                    value: 0
                - number.set:
                    id: probe2_temp_slider
                    value: 0
                - number.set:
                    id: probe3_temp_slider
                    value: 0
                - number.set:
                    id: probe4_temp_slider
                    value: 0
                - number.set:
                    id: bbq_temp_slider
                    value: 0
                - number.set:
                    id: probe1_temp_slider
                    value: 100
                - number.set:
                    id: bbq_temp_slider
                    value: 100
                - if:
                    condition:
                       lambda: 'return id(probe1_plugged).state;'
                    then:
                      - switch.turn_on: probe1_blue
                    else:
                      - switch.turn_off: probe1_blue
                - if:
                    condition:
                       lambda: 'return id(probe2_plugged).state;'
                    then:
                      - switch.turn_on: probe2_blue
                    else:
                      - switch.turn_off: probe2_blue
                - if:
                    condition:
                       lambda: 'return id(probe3_plugged).state;'
                    then:
                      - switch.turn_on: probe3_blue
                    else:
                      - switch.turn_off: probe3_blue
                - if:
                    condition:
                       lambda: 'return id(probe4_plugged).state;'
                    then:
                      - switch.turn_on: probe4_blue
                    else:
                      - switch.turn_off: probe4_blue
                - if:
                    condition:
                       lambda: 'return id(bbq_plugged).state;'
                    then:
                      - switch.turn_on: bbq_blue
                    else:
                      - switch.turn_off: bbq_blue
                - switch.turn_off: bbq_green
                - switch.turn_off: bbq_red
                - switch.turn_off: probe1_green
                - switch.turn_off: probe1_red
                - switch.turn_off: probe2_green
                - switch.turn_off: probe2_red
                - switch.turn_off: probe3_green
                - switch.turn_off: probe3_red
                - switch.turn_off: probe4_green
                - switch.turn_off: probe4_red
button:
  - platform: template
    name: Turn OFF
    id: Close_BBQ
    on_press:
      - globals.set:
          id: bbq_mode
          value: "0"
      - globals.set:
          id: page_max
          value: "2"
      - globals.set:
          id: page_min
          value: "1"
      - display.page.show: !lambda |-
          return id(page1);
      - globals.set:
          id: bbq_desired_temp
          value: "0"
      - globals.set:
          id: probe1_desired_temp
          value: "0"
      - globals.set:
          id: probe2_desired_temp
          value: "0"
      - globals.set:
          id: probe3_desired_temp
          value: "0"
      - globals.set:
          id: probe4_desired_temp
          value: "0"
      - number.set:
          id: probe1_temp_slider
          value: 0
      - number.set:
          id: probe2_temp_slider
          value: 0
      - number.set:
          id: probe3_temp_slider
          value: 0
      - number.set:
          id: probe4_temp_slider
          value: 0
      - number.set:
          id: bbq_temp_slider
          value: 0
      - switch.turn_off: bbq_green
      - switch.turn_off: bbq_red
      - switch.turn_off: probe1_green
      - switch.turn_off: probe1_red
      - switch.turn_off: probe2_green
      - switch.turn_off: probe2_red
      - switch.turn_off: probe3_green
      - switch.turn_off: probe3_red
      - switch.turn_off: probe4_green
      - switch.turn_off: probe4_red
      - switch.turn_off: bbq_fan
      - if:
          condition:
             lambda: 'return id(probe1_plugged).state;'
          then:
            - switch.turn_on: probe1_blue
          else:
            - switch.turn_off: probe1_blue
      - if:
          condition:
             lambda: 'return id(probe2_plugged).state;'
          then:
            - switch.turn_on: probe2_blue
          else:
            - switch.turn_off: probe2_blue
      - if:
          condition:
             lambda: 'return id(probe3_plugged).state;'
          then:
            - switch.turn_on: probe3_blue
          else:
            - switch.turn_off: probe3_blue
      - if:
          condition:
             lambda: 'return id(probe4_plugged).state;'
          then:
            - switch.turn_on: probe4_blue
          else:
            - switch.turn_off: probe4_blue
      - if:
          condition:
             lambda: 'return id(bbq_plugged).state;'
          then:
            - switch.turn_on: bbq_blue
          else:
            - switch.turn_off: bbq_blue 
  - platform: template
    name: Electric Mode
    id: Electric_BBQ
    on_press:
      - sensor.rotary_encoder.set_value:
          id: rotary
          value: 3
      - globals.set:
          id: bbq_mode
          value: "2"
      - globals.set:
          id: page_max
          value: "8"
      - globals.set:
          id: page_min
          value: "3"
      - display.page.show: !lambda |-
          return id(page3);
  - platform: template
    name: Fan mode
    id: Fan_BBQ
    on_press:
      - sensor.rotary_encoder.set_value:
          id: rotary
          value: 3
      - globals.set:
          id: bbq_mode
          value: "1"
      - globals.set:
          id: page_max
          value: "8"
      - globals.set:
          id: page_min
          value: "3"
      - display.page.show: !lambda |-
          return id(page3);
      
sensor:
  - platform: max6675
    id: maintemp
    name: "BBQ Main"
    cs_pin: GPIO5
    accuracy_decimals: 0
    device_class: "temperature"
    state_class: "measurement"
    unit_of_measurement: "°C"
    update_interval: 5s
    filters:
      - lambda: 'return x + id(bbq_adj).state;'
    on_value:
        - if:
            condition:
                lambda: 'return id(bbq_desired_temp) > 0;'
            then:
                - switch.turn_off: bbq_green
                - switch.turn_on: bbq_red
                - if:
                    condition:
                       lambda: 'return id(maintemp).state < ((floor(id(bbq_desired_temp) / 100.0) * 100) + ((id(bbq_desired_temp) - (floor(id(bbq_desired_temp) / 100.0) * 100)) * 5)-10);'
                    then:
                      - if:
                          condition:
                             lambda: 'return id(bbq_mode) == 1;'
                          then:
                            - switch.turn_on: bbq_fan
                            - switch.turn_off: bbq_green
                            - switch.turn_on: bbq_red
                            - switch.turn_off: bbq_blue

                      - if:
                          condition:
                             lambda: 'return id(bbq_mode) == 2;'
                          then:
                            - switch.turn_off: bbq_fan
                            - switch.turn_off: bbq_green
                            - switch.turn_on: bbq_red
                            - switch.turn_off: bbq_blue
                
                - if:
                    condition:
                        lambda: 'return id(maintemp).state > (floor(id(bbq_desired_temp) / 100.0) * 100) + ((id(bbq_desired_temp) - (floor(id(bbq_desired_temp) / 100.0) * 100)) * 5);'
                    then:
                      - switch.turn_off: bbq_fan
                      - switch.turn_on: bbq_green
                      - switch.turn_off: bbq_red
                      - switch.turn_off: bbq_blue
            else:
             - switch.turn_off: bbq_green
             - switch.turn_off: bbq_red
  - platform: max6675
    id: probe1
    name: "Probe 1"
    cs_pin: GPIO32
    accuracy_decimals: 0
    device_class: "temperature"
    state_class: "measurement"
    unit_of_measurement: "°C"
    update_interval: 5s
    filters:
      - lambda: 'return x + id(probe1_adj).state;'
    on_value:
        - if:
            condition:
                lambda: 'return id(probe1_desired_temp) > 0;'
            then:
                - if:
                    condition:
                       lambda: 'return id(probe1).state < id(probe1_desired_temp);'
                    then:
                      - switch.turn_off: probe1_green
                      - switch.turn_on: probe1_red
                      - switch.turn_off: probe1_blue
                    else:
                      - switch.turn_on: probe1_green
                      - switch.turn_off: probe1_red
                      - switch.turn_off: probe1_blue
            else:
              - switch.turn_off: probe1_green
              - switch.turn_off: probe1_red
  - platform: max6675
    id: probe2
    name: "Probe 2"
    cs_pin: GPIO33
    accuracy_decimals: 0
    device_class: "temperature"
    state_class: "measurement"
    unit_of_measurement: "°C"
    update_interval: 5s
    filters:
      - lambda: 'return x + id(probe2_adj).state;'
    on_value:
        - if:
            condition:
                lambda: 'return id(probe2_desired_temp) > 0;'
            then:
              - if:
                  condition:
                     lambda: 'return id(probe2).state < id(probe2_desired_temp);'
                  then:
                    - switch.turn_off: probe2_green
                    - switch.turn_on: probe2_red
                    - switch.turn_off: probe2_blue
                  else:
                    - switch.turn_on: probe2_green
                    - switch.turn_off: probe2_red
                    - switch.turn_off: probe2_blue
            else:
             - switch.turn_off: probe2_green
             - switch.turn_off: probe2_red
  - platform: max6675
    id: probe3
    name: "Probe 3"
    cs_pin: GPIO25
    accuracy_decimals: 0
    device_class: "temperature"
    state_class: "measurement"
    unit_of_measurement: "°C"
    update_interval: 30s
    filters:
      - lambda: 'return x + id(probe3_adj).state;'
    on_value:
        - if:
            condition:
                lambda: 'return id(probe3_desired_temp) > 0;'
            then:
              - if:
                  condition:
                     lambda: 'return id(probe3).state < id(probe3_desired_temp);'
                  then:
                    - switch.turn_off: probe3_green
                    - switch.turn_on: probe3_red
                    - switch.turn_off: probe3_blue
                  else:
                    - switch.turn_on: probe3_green
                    - switch.turn_off: probe3_red
                    - switch.turn_off: probe3_blue
            else:
             - switch.turn_off: probe3_green
             - switch.turn_off: probe3_red
  - platform: max6675
    id: probe4
    name: "Probe 4"
    cs_pin: GPIO26
    accuracy_decimals: 0
    device_class: "temperature"
    state_class: "measurement"
    unit_of_measurement: "°C"
    update_interval: 30s
    filters:
      - lambda: 'return x + id(probe4_adj).state;'
    on_value:
        - if:
            condition:
                lambda: 'return id(probe4_desired_temp) > 0;'
            then:
              - if:
                  condition:
                     lambda: 'return id(probe4).state < id(probe4_desired_temp);'
                  then:
                    - switch.turn_off: probe4_green
                    - switch.turn_on: probe4_red
                    - switch.turn_off: probe4_blue
                  else:
                    - switch.turn_on: probe4_green
                    - switch.turn_off: probe4_red
                    - switch.turn_off: probe4_blue
            else:
             - switch.turn_off: probe4_green
             - switch.turn_off: probe4_red
  - platform: template
    id: bbq_heat_mode
    name: "Heating Mode"
    accuracy_decimals: 0
    lambda: |-
      if (id(bbq_mode) == 1) {
          return 1;
      }
      if (id(bbq_mode) == 2) {
          return 2;
      } 
      else {
          return 0;
      }
    update_interval: 30s

  - platform: rotary_encoder
    name: "Rotary Encoder"
    id: rotary
    pin_a: GPIO35
    pin_b: GPIO34
    resolution: 2
    restore_mode: ALWAYS_ZERO
    on_value:
      then:
        - if:
           condition:
             lambda: 'return id(edit) == true;'
           then:
              - if:
                  condition:
                    lambda: 'return id(rotary).state > id(bbq_max_temp);'
                  then:
                    - sensor.rotary_encoder.set_value:
                            id: rotary
                            value: 100
              - if:
                  condition:
                    lambda: 'return id(rotary).state < 100;'
                  then:
                    - sensor.rotary_encoder.set_value:
                            id: rotary
                            value: !lambda |-
                              return id(bbq_max_temp);   
        - if:
           condition:
             lambda: 'return id(edit) == false;'
           then:
              - if:
                  condition:
                    lambda: 'return id(rotary).state > id(page_max);'
                  then:  
                    - sensor.rotary_encoder.set_value:
                        id: rotary
                        value: !lambda |-
                           return id(page_min);
                  
              - if:
                  condition:
                    lambda: 'return id(rotary).state < id(page_min);'
                  then:  
                    - sensor.rotary_encoder.set_value:
                        id: rotary
                        value: !lambda |-
                          return id(page_max);               
              - display.page.show: !lambda |-
                  if (id(rotary).state==1) 
                  {
                    return id(page1);
                  } 
                  if (id(rotary).state==2) 
                  {
                    return id(page2);
                  } 
                  if (id(rotary).state==3) 
                  {
                    return id(page3);
                  } 
                  if (id(rotary).state==4) 
                  {
                    return id(page4);
                  } 
                  if (id(rotary).state==5) 
                  {
                    return id(page5);
                  } 
                  if (id(rotary).state==6) 
                  {
                    return id(page6);
                  } 
                  if (id(rotary).state==7) 
                  {
                    return id(page7);
                  } 
                  if (id(rotary).state==8) 
                  {
                    return id(page8);
                  }
                  if (id(rotary).state==9) 
                  {
                    return id(page9);
                  } 
              - globals.set:
                  id:  current_page
                  value: !lambda |-
                    return id(rotary).state;

###-------------------------------------------------------------------###
###                           Display                                 ###
###-------------------------------------------------------------------###  
font:
  - file: "chary.ttf"
    id: font_14
    size: 14
  - file: "chary.ttf"
    id: font_24
    size: 24
  - file: "chary.ttf"
    id: font_12
    size: 12
image:
  - file: "grill.png"
    id: grill
  - file: "meat.png"
    id: meat
  - file: "fan_small.png"
    id: fan_small
  - file: "electric_small.png"
    id: electric_small
  - file: "fan_big.png"
    id: fan_big
  - file: "electric_big.png"
    id: electric_big
  - file: "stop_bbq.png"
    id: stop_bbq
    
display:
  - platform: ssd1306_i2c
    i2c_id: bus_a
    model: "SSD1306 128x64"
    rotation: 180
    id: oled
    brightness: 1
### Originally set this entirely too fast. Got fast reponse from rotary encoder but caused frequent api disconnects and reconnects ###
    update_interval: 0.5s
    address: 0x3C
    pages:
      - id: page1
        lambda: |-
          it.print(35, 0, id(font_14), "Fan Mode");
          it.image(48, 16, id(fan_big));
      - id: page2
        lambda: |-
          it.print(20, 0, id(font_14), "Electric Mode");
          it.image(48, 16, id(electric_big));
      - id: page3
        lambda: |-
          if(true){
          it.strftime(40, 0, id(font_14), "%I:%M%p", id(my_time).now());
          }
          it.print(5, 16, id(font_12), "BBQ");
          it.printf(10, 34, id(font_14), "%.1f C", id(maintemp).state);
          it.print(68, 16, id(font_12), "Desired");
          it.printf(68, 34, id(font_14), "%.1f C", (floor(id(bbq_desired_temp) / 100.0) * 100) + ((id(bbq_desired_temp) - (floor(id(bbq_desired_temp) / 100.0) * 100)) * 5));
          it.line(5, 28, 60, 28);
          it.line(68, 28, 128, 28);
      - id: page4
        lambda: |-
          if(true){
          it.strftime(40, 0, id(font_14), "%I:%M%p", id(my_time).now());
          }
          it.print(5, 16, id(font_12), "Probe 1");
          it.printf(10, 34, id(font_14), "%.1f C", id(probe1).state);
          it.print(68, 16, id(font_12), "Desired");
          it.printf(68, 34, id(font_14), "%.1f C", (floor(id(probe1_desired_temp) / 100.0) * 100) + ((id(probe1_desired_temp) - (floor(id(probe1_desired_temp) / 100.0) * 100)) * 5));
          it.line(5, 28, 60, 28);
          it.line(68, 28, 128, 28);
      - id: page5
        lambda: |-
          if(true){
          it.strftime(40, 0, id(font_14), "%I:%M%p", id(my_time).now());
          }
          it.print(5, 16, id(font_12), "Probe 2");
          it.printf(10, 34, id(font_14), "%.1f C", id(probe2).state);
          it.print(68, 16, id(font_12), "Desired");
          it.printf(68, 34, id(font_14), "%.1f C", (floor(id(probe1_desired_temp) / 100.0) * 100) + ((id(probe1_desired_temp) - (floor(id(probe1_desired_temp) / 100.0) * 100)) * 5));
          it.line(5, 28, 60, 28);
          it.line(68, 28, 128, 28);
      - id: page6
        lambda: |-
          if(true){
          it.strftime(40, 0, id(font_14), "%I:%M%p", id(my_time).now());
          }
          it.print(5, 16, id(font_12), "Probe 3");
          it.printf(10, 34, id(font_14), "%.1f C", id(probe3).state);
          it.print(68, 16, id(font_12), "Desired");
          it.printf(68, 34, id(font_14), "%.1f C", (floor(id(probe3_desired_temp) / 100.0) * 100) + ((id(probe3_desired_temp) - (floor(id(probe3_desired_temp) / 100.0) * 100)) * 5));
          it.line(5, 28, 60, 28);
          it.line(68, 28, 128, 28);
      - id: page7
        lambda: |-
          if(true){
          it.strftime(40, 0, id(font_14), "%I:%M%p", id(my_time).now());
          }
          it.print(5, 16, id(font_12), "Probe 4");
          it.printf(10, 34, id(font_14), "%.1f C", id(probe4).state);
          it.print(68, 16, id(font_12), "Desired");
          it.printf(68, 34, id(font_14), "%.1f C", (floor(id(probe4_desired_temp) / 100.0) * 100) + ((id(probe4_desired_temp) - (floor(id(probe4_desired_temp) / 100.0) * 100)) * 5));
          it.line(5, 28, 60, 28);
          it.line(68, 28, 128, 28);
      - id: page8
        lambda: |-
          it.print(35, 0, id(font_14), "Stop BBQ");
          it.image(48, 16, id(stop_bbq));
      - id: page9
        lambda: |-
          if (id(current_page)==3) 
          {
             it.print(20, 0, id(font_14), "Set Main Temp");
          } 
          if (id(current_page)==4) 
          {
            it.print(20, 0, id(font_14), "Set Probe 1");
          } 
          if (id(current_page)==5) 
          {
             it.print(20, 0, id(font_14), "Set Probe 2");
          } 
          if (id(current_page)==6) 
          {
             it.print(20, 0, id(font_14), "Set Probe 3");
          } 
          if (id(current_page)==7)  
          {
             it.print(20, 0, id(font_14), "Set Probe 4");
          } 
          it.printf(20, 25, id(font_24), "%.1f C", (floor(id(rotary).state / 100.0) * 100) + ((id(rotary).state - (floor(id(rotary).state / 100.0) * 100)) * 5));
